# biocthis GitHub Actions workflow (Release: Bioc 3.21 / R 4.5; Devel: 3.22)
# - Uses actions/cache@v4, upload-artifact@v4, checkout@v4
# - Linux uses Bioconductor Docker images; macOS/Windows use setup-r
# - Optional Docker publish guarded by env.run_docker

on:
  push:
  pull_request:

name: R-CMD-check-bioc

env:
  has_testthat: 'true'
  run_covr: 'true'
  run_pkgdown: 'true'
  has_RUnit: 'false'
  cache-version: 'cache-v2'
  run_docker: 'false'   # set to 'true' to enable Docker publish steps

jobs:
  build-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.label }})
    container: ${{ matrix.config.cont }}
    continue-on-error: ${{ matrix.config.allow_failure }}

    strategy:
      fail-fast: false
      matrix:
        config:
          # Linux (release): Bioc 3.21 / R 4.5
          - { os: ubuntu-latest,
              label: 'Bioc 3.21 (R 4.5, Linux)',
              r: '4.5',
              bioc: '3.21',
              allow_failure: false,
              cont: "bioconductor/bioconductor_docker:RELEASE_3_21",
              rspm: "" }
          # macOS (release)
          - { os: macOS-latest,
              label: 'Bioc 3.21 (R 4.5, macOS)',
              r: '4.5',
              bioc: '3.21',
              allow_failure: false,
              cont: "" }
          # Windows (release) â€” allow failure if you prefer stricter gating set to false
          - { os: windows-latest,
              label: 'Bioc 3.21 (R 4.5, Windows)',
              r: '4.5',
              bioc: '3.21',
              allow_failure: true,
              cont: "" }

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      NOT_CRAN: true
      TZ: UTC
      BIOC_VERSION: ${{ matrix.config.bioc }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Cacheable library path for Linux (matches cache.path below)
      - name: Set R library (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir -p /home/runner/work/_temp/Library
          echo ".libPaths('/home/runner/work/_temp/Library')" > ~/.Rprofile

      - name: Checkout repository
        uses: actions/checkout@v4

      # R & pandoc are baked into Bioc Docker images; set up only for non-Linux
      - name: Setup R
        if: runner.os != 'Linux'
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          use-public-rspm: true

      - name: Setup pandoc
        if: runner.os != 'Linux'
        uses: r-lib/actions/setup-pandoc@v2

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE),
                  ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      # --- Caching (v4) ---
      - name: Restore R package cache (non-Linux)
        if: "!contains(github.event.head_commit.message, '/nocache') && runner.os != 'Linux'"
        uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ env.cache-version }}-${{ runner.os }}-bioc-${{ matrix.config.bioc }}-r-${{ matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: |
            ${{ env.cache-version }}-${{ runner.os }}-bioc-${{ matrix.config.bioc }}-r-${{ matrix.config.r }}-
            ${{ env.cache-version }}-${{ runner.os }}-bioc-${{ matrix.config.bioc }}-
            ${{ env.cache-version }}-${{ runner.os }}-

      - name: Cache R packages (Linux)
        if: "!contains(github.event.head_commit.message, '/nocache') && runner.os == 'Linux'"
        uses: actions/cache@v4
        with:
          path: /home/runner/work/_temp/Library
          key: ${{ env.cache-version }}-${{ runner.os }}-bioc-${{ matrix.config.bioc }}-r-${{ matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: |
            ${{ env.cache-version }}-${{ runner.os }}-bioc-${{ matrix.config.bioc }}-r-${{ matrix.config.r }}-
            ${{ env.cache-version }}-${{ runner.os }}-bioc-${{ matrix.config.bioc }}-
            ${{ env.cache-version }}-${{ runner.os }}-

      # --- System dependencies ---
      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sysreqs=$(Rscript -e 'cat("apt-get update -y && apt-get install -y",
              paste(gsub("apt-get install -y ", "",
                         remotes::system_requirements("ubuntu","20.04")),
                    collapse=" "))')
          echo "$sysreqs"
          sudo -s eval "$sysreqs"

      - name: Install macOS system dependencies
        if: matrix.config.os == 'macOS-latest'
        run: |
          brew install libxml2
          echo "XML_CONFIG=/usr/local/opt/libxml2/bin/xml2-config" >> $GITHUB_ENV
          brew install imagemagick@6
          brew install harfbuzz fribidi
          brew install libgit2
          brew install xquartz --cask

      - name: Install Windows system dependencies
        if: runner.os == 'Windows'
        run: |
          ## Add Windows system deps if needed
        shell: Rscript {0}

      # --- R/Bioc setup & deps ---
      - name: Install BiocManager
        run: |
          message(paste('****', Sys.time(), 'installing BiocManager ****'))
          remotes::install_cran("BiocManager")
        shell: Rscript {0}

      - name: Set Bioconductor version
        run: |
          ver <- "${{ matrix.config.bioc }}"
          if (ver != "" && ver != "devel") {
            BiocManager::install(version = ver, ask = FALSE, force = TRUE)
          } else {
            message("Using Bioconductor devel (from container or repos).")
          }
        shell: Rscript {0}

      - name: Install dependencies (pass 1)
        run: |
          repos <- BiocManager::repositories()
          message(paste('****', Sys.time(), 'installing rcmdcheck and BiocCheck ****'))
          install.packages(c("rcmdcheck","BiocCheck"), repos = repos)
          message(paste('****', Sys.time(), 'deps pass 1 (local, no vignettes) ****'))
          remotes::install_local(dependencies = TRUE,
                                 repos = repos,
                                 build_vignettes = FALSE,
                                 upgrade = TRUE)
        continue-on-error: true
        shell: Rscript {0}

      - name: Install dependencies (pass 2)
        run: |
          message(paste('****', Sys.time(), 'deps pass 2 (full, with vignettes) ****'))
          remotes::install_local(dependencies = TRUE,
                                 repos = BiocManager::repositories(),
                                 build_vignettes = TRUE,
                                 upgrade = TRUE,
                                 force = TRUE)
        shell: Rscript {0}

      - name: Install BiocGenerics (for RUnit)
        if: env.has_RUnit == 'true'
        run: |
          BiocManager::install("BiocGenerics")
        shell: Rscript {0}

      - name: Install covr
        if: github.ref == 'refs/heads/master' && env.run_covr == 'true' && runner.os == 'Linux'
        run: |
          remotes::install_cran("covr")
        shell: Rscript {0}

      - name: Install pkgdown
        if: github.ref == 'refs/heads/master' && env.run_pkgdown == 'true' && runner.os == 'Linux'
        run: |
          remotes::install_github("r-lib/pkgdown")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Run CMD check
        env:
          _R_CHECK_CRAN_INCOMING_: false
          DISPLAY: 99.0
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(
              args = c("--no-manual", "--no-vignettes", "--timings"),
              build_args = c("--no-manual", "--keep-empty-dirs", "--no-resave-data"),
              error_on = "warning",
              check_dir = "check"
          )
        shell: Rscript {0}

      - name: Reveal testthat details
        if: env.has_testthat == 'true'
        run: find . -name testthat.Rout -exec cat '{}' ';'

      - name: Run RUnit tests
        if: env.has_RUnit == 'true'
        run: |
          BiocGenerics:::testPackage()
        shell: Rscript {0}

      - name: Run BiocCheck
        env:
          DISPLAY: 99.0
        run: |
          BiocCheck::BiocCheck(
              dir('check', 'tar.gz$', full.names = TRUE),
              `quit-with-status` = TRUE,
              `no-check-R-ver` = TRUE,
              `no-check-bioc-help` = TRUE
          )
        shell: Rscript {0}

      - name: Test coverage
        if: github.ref == 'refs/heads/master' && env.run_covr == 'true' && runner.os == 'Linux'
        run: |
          covr::codecov()
        shell: Rscript {0}

      - name: Install package (for pkgdown)
        if: github.ref == 'refs/heads/master' && env.run_pkgdown == 'true' && runner.os == 'Linux'
        run: R CMD INSTALL .

      - name: Build and deploy pkgdown site
        if: github.ref == 'refs/heads/master' && env.run_pkgdown == 'true' && runner.os == 'Linux'
        run: |
          git config --global --add safe.directory $PWD
          git config --local user.name "$GITHUB_ACTOR"
          git config --local user.email "$GITHUB_ACTOR@users.noreply.github.com"
          Rscript -e "pkgdown::deploy_to_branch(new_process = FALSE)"
        shell: bash {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-bioc-${{ matrix.config.bioc }}-r-${{ matrix.config.r }}-results
          path: check

      # --- Optional Docker publish (guarded by env.run_docker == 'true') ---
      - name: Set up Docker Buildx
        if: "!contains(github.event.head_commit.message, '/nodocker') && env.run_docker == 'true' && runner.os == 'Linux'"
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: "!contains(github.event.head_commit.message, '/nodocker') && env.run_docker == 'true' && runner.os == 'Linux'"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build & push
        if: "!contains(github.event.head_commit.message, '/nodocker') && env.run_docker == 'true' && runner.os == 'Linux'"
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            davislaboratory/singscore:latest
            davislaboratory/singscore:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
